"""
Gustavo Gama


-----------
Main script

Challenge Natixis: monitoring a website





Usage of the script:
    - simply run this py script and it will start the monitoring task of the website "https://www.banquepopulaire.fr/".
    
    - Done on chrome & edge.
    
    - Files generated by the script:
        1) execution.log (with the logs of the sim);
        2) screenshots in case of an error ;
        3) Videos from the process (for each browser), saved on the folder "videos_obtained_simulation"
------------

"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import threading


#Image recognition lib :
#from lackey import *
from lackey import Screen, FindFailed


import utils   #My 2nd py file  with some utility fcts.


# monitoring function
def monitor_website(browser_type, config):
    """
    Performs the different steps of the monitoring task.
    
    
    

    Parameters
    ----------
    browser_type : STRING
        name of the browser, usage: 'chrome', 'edge'
    config : dict
        The config, based on the XML file.

    Returns
    -------
    None.

    """
    driver = None
    if browser_type == 'chrome':
        #Using Chrome browser
        driver = webdriver.Chrome()
       
    elif browser_type == 'edge':
        #Using EDGE browser
        driver = webdriver.Edge()
        
    else:
        logger.error("Invalid browser type")
        return

    try:
        
        logger.info("STARTING A NEW MONITORING SIM...\n")
        logger.info(f"Accessing website using {browser_type}")
        
        #----------------------------------------------------------------------
        #STEP 1: enter website 
        #print("Opening website")
        driver.get(config['url'])
        
        #time.sleep(2)

        #STEP 2: Find cookies button (POPUP): Accepter;
        accept_button = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, config['accept_button_xpath']))
        )

        accept_button.click() #click on it;

        logger.info("Successfully clicked on the Accept button from cookies...")
        #----------------------------------------------------------------------
        #STEP 2bis:
        #Simulate going to the bottom of the page to find the button "Trouver une Agence"
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        

        find_agency_button = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "link-list"))
        )
        
        #print("Found find agency button, clicking")
        find_agency_button.click()

        logger.info("Successfully clicked on the Find Agency button...")
        #----------------------------------------------------------------------
        #STEP 3: fill with text and search for the agency.
        #print("Writing in the form: street(Lyon) and city(69000)")
        search_street_field = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, config['search_street_xpath']))
        )
        search_city_field = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, config['search_city_xpath']))
        )


        search_street_field.clear()
        search_street_field.send_keys(config["city_name"])  # Lyon
        search_city_field.clear()
        search_city_field.send_keys(config['city_zip_code']) #69000


        #time.sleep(2)
        
        
        #Button "Rechercher" after filling the form;
        search_with_form_button = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, config['search_with_form_button_xpath']))
        )
        search_with_form_button.click()
        
        
        logger.info("Successfully switched to the new page with the map...")
        
        #time.sleep(2)
        #capture_frame_key_moment(recorder,rect)
        #----------------------------------------------------------------------
        #STEP 4: Pick choice from the list of options (Lyon Perrache)
        choice_button = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, config['pick_choice_list_xpath']))
        ) 
        choice_button.click()
        
        #time.sleep(2)
    
        #----------------------------------------------------------------------
        #STEP 5: click on map.
        # Different method here: usage of Lackey to find the map location and click it
        # Approach: 
        # - Instead of using the whole screen, we select a region from the screen, the map.
        # - Inside that map, we select the number 4, and click on it.
        # 
        #
        # This avoids confusion with the other "numbers" that are present on the website (on the list on the left of the map for example).
        # For this we need 2 screenshots, one of the whole map (file "map_full.png"), and another of the number 4 (file "map_location_agency4.png")
        try:
            # Find the region corresponding to the full map screenshot
            map_region = Screen().find("images_folder_lackey/map_full.png")
           
            # Find the "4" within that region and click it
            map_region.find("images_folder_lackey/map_location_agency4.png").click()
           
            logger.info("Successfully clicked on location 4 on the map.")

        except FindFailed:
            logger.error("Failed to find the map location. Taking screenshot w/ Lackey.")
            # screen shot in case of error with Lackey during the map process.
            driver.save_screenshot('lackey_error_screenshot.png')
                
                
        
        
        #time.sleep(2)

        logger.info("Completed all steps successfully.")
        
    except Exception as e:
        #print(f"An error occurred: {e}")
        logger.error(f"An error occurred: {e}")
        driver.save_screenshot('error_screenshot.png')
    
    finally:

        
        #print("Closing browser")
        logger.info("Closing browser... \n")
        driver.quit()







# Fct to record the sim;
def run_and_record(browser_type, config, logger, output_filename):
    """
    

    Parameters
    ----------
    browser_type : String
        browser type (chrome / edge)
    config : dict
        Dict with config from XML file
        
    logger : the logger ref
    
    output_filename : String
        File name to write the video

    Returns
    -------
    None.

    """
    #record_thread = threading.Thread(target=utils.record_window, args=(browser_type, output_filename))
    record_thread = threading.Thread(target=utils.record_full_screen, args=(output_filename,))
    record_thread.start()
    
    try:
        with utils.capture_output() as (out, err):
            monitor_website(browser_type, config)
        output = out.getvalue().strip()
        if output:
            logger.info(f"Lackey Output: {output}")
    finally:
        utils.stop_recording()
        record_thread.join()



#Main entry point.

if __name__ == '__main__':
    
    #Logging feature
    logger = utils.initialize_logger()
    #Using an XML file for the config (sim tasks)
    config = utils.read_xml_config()

    #Running the script twice, for both browsers (edge & chrome)
    print("Running script with Chrome...")

    run_and_record('chrome', config, logger, 'videos_obtained_simulation/chromeVideo.mp4')
    
    print("Sleeping 5seconds....")
    time.sleep(5)
    
    
    print("Running script with Edge...")
    run_and_record('edge', config, logger, 'videos_obtained_simulation/edgeVideo.mp4')
    time.sleep(2)
    #monitor_website('edge', config)
    print("End of script")
    #code to unblock the log files 
    for handler in logger.handlers[:]:
        handler.close()
        logger.removeHandler(handler)
    